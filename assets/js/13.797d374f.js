(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{575:function(t,a,s){"use strict";s.r(a);var _=s(17),v=Object(_.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("img",{attrs:{src:"https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png",alt:""}})]),t._v(" "),s("p",[t._v("Workspace：工作区")]),t._v(" "),s("p",[t._v("Index / Stage：暂存区")]),t._v(" "),s("p",[t._v("Repository：仓库区（或本地仓库）")]),t._v(" "),s("p",[t._v("Remote：远程仓库")]),t._v(" "),s("h1",{attrs:{id:"git-本地库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-本地库"}},[t._v("#")]),t._v(" Git 本地库")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("命令名称")]),t._v(" "),s("th",[t._v("命令作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("git init")]),t._v(" "),s("td",[t._v("初始化本地库")])]),t._v(" "),s("tr",[s("td",[t._v("git config")]),t._v(" "),s("td",[t._v("git配置")])]),t._v(" "),s("tr",[s("td",[t._v("git config --global user.name 用户名")]),t._v(" "),s("td",[t._v("设置用户签名的用户名部分")])]),t._v(" "),s("tr",[s("td",[t._v("git config --global user.email 邮箱")]),t._v(" "),s("td",[t._v("设置用户签名的邮箱部分")])]),t._v(" "),s("tr",[s("td",[t._v("git status")]),t._v(" "),s("td",[t._v("查看本地库状态")])]),t._v(" "),s("tr",[s("td",[t._v("git add <文件名>")]),t._v(" "),s("td",[t._v("添加到暂存区")])]),t._v(" "),s("tr",[s("td",[t._v('git commit -m "日志信息" 文件名')]),t._v(" "),s("td",[t._v("提交到本地库")])]),t._v(" "),s("tr",[s("td",[t._v("git reflog")]),t._v(" "),s("td",[t._v("查看历史记录")])]),t._v(" "),s("tr",[s("td",[t._v("git reset --hard 版本号")]),t._v(" "),s("td",[t._v("版本穿梭")])])])]),t._v(" "),s("h2",{attrs:{id:"git-init"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-init"}},[t._v("#")]),t._v(" git init")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在当前目录新建一个Git代码库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个目录，将其初始化为Git代码库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("project-name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h2",{attrs:{id:"git-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-config"}},[t._v("#")]),t._v(" git config")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置提交代码时的用户信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zhangsanatguigu"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dev111@163.com"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示当前的Git配置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --list\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编辑Git配置文件 []表示可选")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config -e "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h2",{attrs:{id:"git-status"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-status"}},[t._v("#")]),t._v(" git status")]),t._v(" "),s("ul",[s("li",[t._v("On branch master ：表示主分支")]),t._v(" "),s("li",[t._v("Untracked files：表示未跟踪状态")])]),t._v(" "),s("p",[t._v("Git工作目录下的文件状态信息：")]),t._v(" "),s("ul",[s("li",[t._v("Untracked 未跟踪（未被纳入版本控制）")]),t._v(" "),s("li",[t._v("Tracked 已跟踪（被纳入版本控制）")]),t._v(" "),s("li",[t._v("Unmodified 未修改状态")]),t._v(" "),s("li",[t._v("Modified 已修改状态")]),t._v(" "),s("li",[t._v("Staged 已暂存状态")])]),t._v(" "),s("p",[t._v("这些文件的状态会随着我们执行Git的命令发生变化")]),t._v(" "),s("ul",[s("li",[t._v("红色表示新建文件或者新修改的文件,都在工作区.")]),t._v(" "),s("li",[t._v("绿色表示文件在暂存区")]),t._v(" "),s("li",[t._v("新建的文件在工作区，需要添加到暂存区并提交到仓库区")])]),t._v(" "),s("p",[t._v("也可以使用git status –s 使输出信息更加简洁")]),t._v(" "),s("ul",[s("li",[t._v("?? : 表示未跟踪状态")])]),t._v(" "),s("h2",{attrs:{id:"git-add-文件名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-add-文件名"}},[t._v("#")]),t._v(" git add <文件名>")]),t._v(" "),s("p",[t._v("只是增加到栈空间（index文件）中，还没有添加到本地库中。初始化时没有这个index文件。这还是一个新文件，需要将栈空间文件提交到本地仓库。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加项目中所有文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加指定的文件，若文件不存在会报错：fatal: pathspec 'hello.txt' did not match any files")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" hello.txt\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("撤销暂存区的文件")])]),t._v(" "),s("ul",[s("li",[t._v("命令：\n"),s("ul",[s("li",[t._v("git reset <文件名称>\n"),s("ul",[s("li",[t._v("撤销后，查看文件状态（git status）文件由绿色变为红色")])])])])])]),t._v(" "),s("h2",{attrs:{id:"git-commit-m-日志信息-文件名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-m-日志信息-文件名"}},[t._v("#")]),t._v(' git commit -m "日志信息" 文件名')]),t._v(" "),s("p",[t._v("将暂存区文件提交到本地库")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("git commit")]),t._v(" "),s("ul",[s("li",[t._v("执行命令时需要填写提交日志，进入编辑模式")])])]),t._v(" "),s("li",[s("p",[t._v("git commit –m “注释内容”")]),t._v(" "),s("ul",[s("li",[t._v("直接用-m参数指定日志内容，推荐")]),t._v(" "),s("li",[t._v("commit 会生成一条版本记录，add只是添加暂存区，不会生成版本记录，建议多次add后，一次性commit，避免每次add都commit产生版本信息爆炸。")])])]),t._v(" "),s("li",[s("p",[t._v('git commit -am "注释内容"')])]),t._v(" "),s("li",[s("p",[t._v("代码编辑完成后即可进行 add 和 commit 操作")])]),t._v(" "),s("li",[s("p",[t._v("提示：添加和提交合并命令，不能指定文件")])])]),t._v(" "),s("h2",{attrs:{id:"_4-3-实战-查看日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-实战-查看日志"}},[t._v("#")]),t._v(" 4.3 实战(查看日志)")]),t._v(" "),s("p",[t._v("命令：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("git log")])]),t._v(" "),s("li",[s("p",[t._v("git log a.txt")]),t._v(" "),s("ul",[s("li",[t._v("查看文件日志(查看所有日志或某个文件日志)")]),t._v(" "),s("li",[t._v("q退出")])])]),t._v(" "),s("li",[s("p",[t._v("git log --pretty=oneline")]),t._v(" "),s("ul",[s("li",[t._v("如果日志很多,可以在一行显示")])])]),t._v(" "),s("li",[s("p",[t._v("git reflog")]),t._v(" "),s("ul",[s("li",[t._v("查看历史操作")])])])]),t._v(" "),s("h2",{attrs:{id:"git-reset-hard-版本号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-hard-版本号"}},[t._v("#")]),t._v(" git reset --hard 版本号")]),t._v(" "),s("h3",{attrs:{id:"版本回退"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("git reset --hard HEAD^")])]),t._v(" "),s("li",[s("p",[t._v("一次回退一个版本，一个^代表一个版本数量")])]),t._v(" "),s("li",[s("p",[t._v("git reset --hard HEAD~n")]),t._v(" "),s("ul",[s("li",[t._v("回退n次操作")])])])]),t._v(" "),s("h3",{attrs:{id:"版本穿梭"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本穿梭"}},[t._v("#")]),t._v(" 版本穿梭")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("git reflog a.txt")]),t._v(" "),s("ul",[s("li",[t._v("查看历史操作")])])]),t._v(" "),s("li",[s("p",[t._v("git reset --hard 版本号")]),t._v(" "),s("ul",[s("li",[t._v("回到最新的版本")])])])]),t._v(" "),s("h3",{attrs:{id:"版本撤销"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本撤销"}},[t._v("#")]),t._v(" 版本撤销：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("未add，未commit")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("vim修改文件，没有add和commit，进行撤销")])]),t._v(" "),s("li",[s("p",[t._v("命令：")]),t._v(" "),s("ul",[s("li",[t._v("git checkout -- a.txt\n"),s("ul",[s("li",[t._v("撤销修改(还原原来的文件)")])])])])])])]),t._v(" "),s("li",[s("p",[t._v("已add，未commit")]),t._v(" "),s("ul",[s("li",[t._v("vim修改文件，添加add，但没提交commit，进行撤销")]),t._v(" "),s("li",[t._v("命令：")]),t._v(" "),s("li",[t._v("git add a.txt")]),t._v(" "),s("li",[t._v("git reset\n"),s("ul",[s("li",[t._v("软回退：")]),t._v(" "),s("li",[t._v("查看文件内容：cat a.txt")]),t._v(" "),s("li",[t._v("查看日志：git reflog a.txt")])])])])])]),t._v(" "),s("h2",{attrs:{id:"_4-6-实战-分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-实战-分支"}},[t._v("#")]),t._v(" 4.6 实战(分支)")]),t._v(" "),s("p",[t._v("几乎所有的版本控制系统都以某种形式支持分支。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。Git 的master分支并不是一个特殊分支。它跟其它分支没有区别。之所以几乎每一个仓库都有 master 分支，是因为git init 命令默认创建它，并且大多数人都懒得去改动它。")]),t._v(" "),s("h3",{attrs:{id:"_1-实际开发流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-实际开发流程"}},[t._v("#")]),t._v(" 1.  实际开发流程")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"image/img008.png"}}),t._v(" "),s("h3",{attrs:{id:"_2-分支概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-分支概念"}},[t._v("#")]),t._v(" 2.  分支概念")]),t._v(" "),s("p",[t._v("在使用版本控制工具开发的过程中，同时推进多个任务")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"image/img009.png"}}),t._v(" "),s("h3",{attrs:{id:"_3-分支的好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-分支的好处"}},[t._v("#")]),t._v(" 3.  分支的好处")]),t._v(" "),s("p",[t._v("同时并行推进多个功能开发，提高开发效率")]),t._v(" "),s("p",[t._v("各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。")]),t._v(" "),s("h2",{attrs:{id:"_4-7-实战-版本冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-实战-版本冲突"}},[t._v("#")]),t._v(" 4.7 实战(版本冲突)")]),t._v(" "),s("h3",{attrs:{id:"_1-冲突产生的表现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-冲突产生的表现"}},[t._v("#")]),t._v(" 1.  冲突产生的表现")]),t._v(" "),s("p",[s("img",{attrs:{src:"image/img015.png",alt:""}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Git使用“<<<<<<<、=========、>>>>>>>>>>”符号帮我们标记出来，现在产生冲突的内容(绿色区域)。\n\n<<<<<<< HEAD  Hello Git!I am very happy!  &&&&&&&&&&&&  Hello Git!I am very happy!  =======  表示HEAD指针指向的位置在冲突中的内容  \n\n=======  Hello Git!I am very happy!  Hello Git!I am very happy!  ************  >>>>>>> hotfix  表示hotfix指针指向的位置在冲突中的内容  \n")])])]),s("h3",{attrs:{id:"_2-冲突产生的原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-冲突产生的原因"}},[t._v("#")]),t._v(" 2.  冲突产生的原因")]),t._v(" "),s("p",[t._v("合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容。")]),t._v(" "),s("h3",{attrs:{id:"_3-冲突的解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-冲突的解决"}},[t._v("#")]),t._v(" 3.  冲突的解决")]),t._v(" "),s("p",[t._v("①编辑有冲突的文件，删除特殊符号，决定要使用的内容")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("vim hello.txt\n")])])]),s("p",[s("img",{attrs:{src:"image/img016.png",alt:""}})]),t._v(" "),s("p",[t._v("使用 dd 删除不需要的行，留下需要的内容")]),t._v(" "),s("p",[s("img",{attrs:{src:"image/img017.png",alt:""}})]),t._v(" "),s("p",[t._v("②添加到暂存区")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git add hello.txt \n")])])]),s("p",[t._v("③执行提交（注意：此时，使用git commit命令不能带文件名）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git commit -m "fix conflict"\n\n[master 3055b30] fix conflict\n')])])]),s("h3",{attrs:{id:"_4-避免冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-避免冲突"}},[t._v("#")]),t._v(" 4.  避免冲突")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("容易冲突的操作方式")]),t._v(" "),s("ul",[s("li",[t._v("多个人同时操作了同一个文件")]),t._v(" "),s("li",[t._v("一个人一直写不提交")]),t._v(" "),s("li",[t._v("修改之前不更新最新代码")]),t._v(" "),s("li",[t._v("提交之前不更新最新代码")]),t._v(" "),s("li",[t._v("擅自修改同事代码")])])]),t._v(" "),s("li",[s("p",[t._v("减少冲突的操作方式")]),t._v(" "),s("ul",[s("li",[t._v("养成良好的操作习惯，先"),s("code",[t._v("pull")]),t._v("在修改,修改完立即"),s("code",[t._v("commit")]),t._v("和"),s("code",[t._v("push")])]),t._v(" "),s("li",[t._v("一定要确保自己正在修改的文件是最新版本的")]),t._v(" "),s("li",[t._v("各自开发各自的模块")]),t._v(" "),s("li",[t._v("如果要修改公共文件，一定要先确认有没有人正在修改")]),t._v(" "),s("li",[t._v("下班前一定要提交代码,上班第一件事拉取最新代码")]),t._v(" "),s("li",[t._v("一定不要擅自修改同事的代码")])])])]),t._v(" "),s("h1",{attrs:{id:"git-分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-分支"}},[t._v("#")]),t._v(" Git 分支")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("命令名称")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("git branch 分支名")]),t._v(" "),s("td",[t._v("创建分支")])]),t._v(" "),s("tr",[s("td",[t._v("git branch -v")]),t._v(" "),s("td",[t._v("查看分支")])]),t._v(" "),s("tr",[s("td",[t._v("git checkout 分支名")]),t._v(" "),s("td",[t._v("切换分支")])]),t._v(" "),s("tr",[s("td",[t._v("git merge 分支名")]),t._v(" "),s("td",[t._v("把指定的分支合并到当前分支上")])]),t._v(" "),s("tr",[s("td",[t._v("git branch -d 分支名")]),t._v(" "),s("td",[t._v("删除指定分支")])])])]),t._v(" "),s("h2",{attrs:{id:"查看分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看分支"}},[t._v("#")]),t._v(" 查看分支")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有本地分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有远程分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -r\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有本地分支和远程分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -a\n")])])]),s("h2",{attrs:{id:"新建分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建分支"}},[t._v("#")]),t._v(" 新建分支")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，但依然停留在当前分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch 分支名\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，并切换到该分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，指向指定commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，与指定的远程分支建立追踪关系")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --track "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote-branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"删除分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除本地分支 注意：删除时不能位于这个分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d 分支名\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除远程分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch-name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -dr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote/branch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h1",{attrs:{id:"git-远程库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-远程库"}},[t._v("#")]),t._v(" Git 远程库")]),t._v(" "),s("h3",{attrs:{id:"_2-提交代码到本地库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-提交代码到本地库"}},[t._v("#")]),t._v(" 2.  提交代码到本地库")]),t._v(" "),s("p",[t._v("$ touch love.txt")]),t._v(" "),s("p",[t._v("$ vim love.txt")]),t._v(" "),s("p",[t._v("$ git add love.txt")]),t._v(" "),s("p",[t._v('$ git commit -m "love form zhangsanatguigu" love.txt')]),t._v(" "),s("h3",{attrs:{id:"_3-登录账号到github-创建远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-登录账号到github-创建远程仓库"}},[t._v("#")]),t._v(" 3.  登录账号到github,创建远程仓库.")]),t._v(" "),s("p",[t._v("①登录后没有任何项目情况下,会显示如下页面")]),t._v(" "),s("p",[t._v("②创建新的仓库")]),t._v(" "),s("p",[t._v("③填写创建新仓库信息")]),t._v(" "),s("p",[t._v("④创建后出现仓库地址，注意：点一下HTTPS，换下地址。")]),t._v(" "),s("h3",{attrs:{id:"_4-本地项目推送到远程库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-本地项目推送到远程库"}},[t._v("#")]),t._v(" 4.  本地项目推送到远程库")]),t._v(" "),s("p",[t._v("增加远程地址")]),t._v(" "),s("p",[t._v("git remote add <远端代号> <远端地址>")]),t._v(" "),s("p",[t._v("<远端代号> 是指远程连接的代号,一般直接用origin作为代号,也可以自定义.")]),t._v(" "),s("p",[t._v("<远端地址> 默认远程连接的url")]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("p",[t._v("git remote add origin https://github.com/zhangsanatguigu/zhangsanatguigu_project.git")]),t._v(" "),s("p",[t._v("git push <远端代号> <本地分支名称>")]),t._v(" "),s("p",[t._v("<远端代号> 是指远程链接的代号")]),t._v(" "),s("p",[t._v("<本地分支> 是指要提交的分支名字,比如master")]),t._v(" "),s("p",[t._v("例如：git push origin master")]),t._v(" "),s("h3",{attrs:{id:"_5-从github上克隆一个别人的项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-从github上克隆一个别人的项目"}},[t._v("#")]),t._v(" 5.  从GitHub上克隆一个别人的项目")]),t._v(" "),s("p",[t._v("在选好的目录下执行命令下载远端项目")]),t._v(" "),s("p",[t._v("git clone  <远端地址>  <新项目目录名>。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("<远端地址> 是指远程链接的地址。")])]),t._v(" "),s("li",[s("p",[t._v("<项目目录名> 是指为克隆的项目在本地新建的目录名称，可以不填，默认是GitHub的项目名。")])]),t._v(" "),s("li",[s("p",[t._v("命令执行完后，会自动为这个远端地址建一个名为origin的代号。")])])]),t._v(" "),s("p",[t._v("例如")]),t._v(" "),s("p",[t._v("git clone https://github.com/zhangsanatguigu/zhangsanatguigu_project.git  hello_world")]),t._v(" "),s("h3",{attrs:{id:"_6-使用自己的账户提交修改其他项目的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-使用自己的账户提交修改其他项目的内容"}},[t._v("#")]),t._v(" 6.  使用自己的账户提交修改其他项目的内容.")]),t._v(" "),s("p",[t._v("配置账号和邮箱")]),t._v(" "),s("h3",{attrs:{id:"_7-修改提交到本地库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-修改提交到本地库"}},[t._v("#")]),t._v(" 7.  修改提交到本地库")]),t._v(" "),s("h3",{attrs:{id:"_8-本地库提交到远程库-权限不够"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-本地库提交到远程库-权限不够"}},[t._v("#")]),t._v(" 8.  本地库提交到远程库，权限不够")]),t._v(" "),s("p",[t._v("\\1. 注:")]),t._v(" "),s("p",[t._v("· clone会自动关联远端地址为origin默认名称,所以不需要git remote …")]),t._v(" "),s("p",[t._v("· lisiatguigu账户提交修改内容,访问被拒绝.权限不够.")]),t._v(" "),s("p",[t._v("· 以上对项目的操作方式，必须是项目的创建者或者合作伙伴。")]),t._v(" "),s("p",[t._v("· 合作伙伴添加方式如下图: 在项目中点击settings页签，然后点击Collaborators,然后在文本框中搜索合作伙伴的邮箱或者账号。点击添加。")]),t._v(" "),s("p",[t._v("· 添加后GitHub会给合作伙伴对应的邮箱发一封，邀请邮件。")]),t._v(" "),s("p",[t._v("\\2. [zhangsanatguigu]设置权限")]),t._v(" "),s("p",[t._v("· Settings -> Collaborators -> [zhangsanatguigu]添加合作伙伴[lisiatguigu]")]),t._v(" "),s("p",[t._v("·    [zhangsanatguigu]邀请函已经发送到[lisiatguigu]邮箱")]),t._v(" "),s("p",[t._v("·    [lisiatguigu]登录邮箱，打开链接")]),t._v(" "),s("p",[t._v("·    [lisiatguigu]接受邀请,则合伙伙伴正式加入项目，获得直接提交代码的权限")]),t._v(" "),s("p",[t._v("\\3. [lisiatguigu]重新提交,OK")]),t._v(" "),s("h3",{attrs:{id:"_9-被提交commit-更新本地文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-被提交commit-更新本地文件"}},[t._v("#")]),t._v(" 9.  被提交commit，更新本地文件")]),t._v(" "),s("p",[t._v("更新前查看")]),t._v(" "),s("p",[t._v("更新")]),t._v(" "),s("p",[t._v("更新后查看")]),t._v(" "),s("h2",{attrs:{id:"_5-6-解决重复输入密码问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-解决重复输入密码问题"}},[t._v("#")]),t._v(" 5.6 解决重复输入密码问题")]),t._v(" "),s("h3",{attrs:{id:"_1-两种模式-https-vs-ssh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-两种模式-https-vs-ssh"}},[t._v("#")]),t._v(" 1.  两种模式：https VS ssh")]),t._v(" "),s("p",[t._v("ssh模式比https模式的一个重要好处就是，每次push，pull，fetch等操作时不用重复填写用户名密码。")]),t._v(" "),s("p",[t._v("前提是你必须是这个项目的拥有者或合作者，且配好了ssh key")]),t._v(" "),s("h3",{attrs:{id:"_2-如何配置ssh-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何配置ssh-key"}},[t._v("#")]),t._v(" 2.  如何配置ssh key")]),t._v(" "),s("p",[t._v("①步骤1：检查电脑家目录下是否已经生成了SSH key，如果有.ssh目录删除即可")]),t._v(" "),s("p",[t._v("②步骤2：创建SSH Key : ssh-keygen -t rsa -C lisiatguigu")]),t._v(" "),s("p",[t._v("成功的话(执行命令不需要输入任何内容)，会在~/下生成.ssh文件夹，查看生成两个文件")]),t._v(" "),s("p",[t._v("id_rsa")]),t._v(" "),s("p",[t._v("id_rsa.pub")]),t._v(" "),s("p",[t._v("打开id_rsa.pub，复制里面的内容，到github上")]),t._v(" "),s("p",[t._v("③步骤3：登录[lisiatguigu]账户")]),t._v(" "),s("p",[t._v("打开用户设置")]),t._v(" "),s("p",[t._v("点击[SSH and GPG keys] 填写Title和Key，点击[Add SSH key]")]),t._v(" "),s("h3",{attrs:{id:"_3-重新测试-提交不再需要输入密码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-重新测试-提交不再需要输入密码"}},[t._v("#")]),t._v(" 3.  重新测试：提交不再需要输入密码")]),t._v(" "),s("p",[t._v("①[lisiatguigu]复制SSH的url连接")]),t._v(" "),s("p",[t._v("②[lisiatguigu]重新建立github连接,如果之前配置过则删除，重新配置")]),t._v(" "),s("p",[t._v("命令：")]),t._v(" "),s("p",[t._v("git remote add originssh git@github.com:zhangsanatguigu/zhangsanatguigu_project.git")]),t._v(" "),s("p",[t._v("git push originssh master")]),t._v(" "),s("p",[t._v("修改文件，重新提交,不需要再输入用户名和密码了")]),t._v(" "),s("h3",{attrs:{id:"_4-注意问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-注意问题"}},[t._v("#")]),t._v(" 4.  注意问题:")]),t._v(" "),s("p",[t._v("一个账户只能设置一个默认密码.")]),t._v(" "),s("p",[t._v("如果有多个账号存在的话，只能选择设置其中某一个")]),t._v(" "),s("h2",{attrs:{id:"_5-7-配置git忽略文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-配置git忽略文件"}},[t._v("#")]),t._v(" 5.7 配置Git忽略文件")]),t._v(" "),s("h3",{attrs:{id:"_1-哪些文件要忽略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-哪些文件要忽略"}},[t._v("#")]),t._v(" 1.  哪些文件要忽略？")]),t._v(" "),s("h4",{attrs:{id:"_1-eclipse特定文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-eclipse特定文件"}},[t._v("#")]),t._v(" 1)   Eclipse特定文件")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"image/img019.png"}}),t._v(" "),s("h4",{attrs:{id:"_2-idea特定文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-idea特定文件"}},[t._v("#")]),t._v(" 2)   IDEA特定文件")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"image/img020.png"}}),t._v(" "),s("h4",{attrs:{id:"_3-maven工程的target目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-maven工程的target目录"}},[t._v("#")]),t._v(" 3)   Maven工程的target目录")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"image/img021.png"}}),t._v(" "),s("h3",{attrs:{id:"_2-为什么要忽略它们"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么要忽略它们"}},[t._v("#")]),t._v(" 2.  为什么要忽略它们？")]),t._v(" "),s("p",[t._v("与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽IDE工具之间的差异。")]),t._v(" "),s("h3",{attrs:{id:"_3-怎么忽略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-怎么忽略"}},[t._v("#")]),t._v(" 3.  怎么忽略？")]),t._v(" "),s("h4",{attrs:{id:"_1-创建忽略规则文件-git-ignore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建忽略规则文件-git-ignore"}},[t._v("#")]),t._v(" 1)   创建忽略规则文件（git.ignore）")]),t._v(" "),s("h5",{attrs:{id:"macos-创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#macos-创建"}},[t._v("#")]),t._v(" macOS 创建")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在终端打开家目录")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" .gitignore\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" .gitignore\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将需要忽略的的文件输入 然后保存退出")]),t._v("\n")])])]),s("h5",{attrs:{id:"忽略规则文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略规则文件"}},[t._v("#")]),t._v(" 忽略规则文件")]),t._v(" "),s("p",[t._v("这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig文件引用，建议也放在用户家目录下")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# Compiled class file\n*.class\n \n# Log file\n*.log\n \n# BlueJ files\n*.ctxt\n \n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n \n# Package Files #\n*.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n \n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n \n.classpath\n.project\n.settings\ntarget\n.idea\n*.iml\n\n")])])]),s("h4",{attrs:{id:"_2-在-gitconfig文件中引用忽略规则文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-在-gitconfig文件中引用忽略规则文件"}},[t._v("#")]),t._v(" 2)   在.gitconfig文件中引用忽略规则文件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[user]\nname = peter\nemail = peter@atguigu.com\n[core]\nexcludesfile = C:/Users/Lenovo/git.ignore\n\n")])])]),s("p",[t._v("注意：这里要使用“正斜线（/）”，不要使用“反斜线（\\）”")]),t._v(" "),s("h1",{attrs:{id:"git工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git工作流"}},[t._v("#")]),t._v(" Git工作流")]),t._v(" "),s("p",[t._v("简单来说就是，一个项目的成员们在工作中统一使用Git的工作方式。")]),t._v(" "),s("p",[t._v("Gitflow工作流通过为功能开发、发布准备和维护设立了独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("简单的分支")])])]),t._v(" "),s("img",{attrs:{src:"image/img042.png"}}),t._v(" "),s("p",[s("strong",[t._v("复杂分支案例演示：")])]),t._v(" "),s("img",{attrs:{src:"image/img043.png"}}),t._v(" "),s("h2",{attrs:{id:"_8-2-分支种类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-分支种类"}},[t._v("#")]),t._v(" 8.2 分支种类")]),t._v(" "),s("ul",[s("li",[t._v("主干分支 master")])]),t._v(" "),s("p",[t._v("主要负责管理正在运行的生产环境代码。永远保持与正在运行的生产环境完全一致。")]),t._v(" "),s("ul",[s("li",[t._v("开发分支  develop")])]),t._v(" "),s("p",[t._v("主要负责管理正在开发过程中的代码。一般情况下应该是最新的代码。")]),t._v(" "),s("ul",[s("li",[t._v("bug修理分支 hotfix")])]),t._v(" "),s("p",[t._v("要负责管理生产环境下出现的紧急修复的代码。 从主干分支分出，修理完毕并测试上线后，并回主干分支。并回后，视情况可以删除该分支。")]),t._v(" "),s("ul",[s("li",[t._v("发布版本分支 release")])]),t._v(" "),s("p",[t._v("较大的版本上线前，会从开发分支中分出发布版本分支，进行最后阶段的集成测试。该版本上线后，会合并到主干分支。生产环境运行一段阶段较稳定后可以视情况删除。")]),t._v(" "),s("ul",[s("li",[t._v("功能分支  feature")])]),t._v(" "),s("p",[t._v("为了不影响较短周期的开发工作，一般把中长期开发模块，会从开发分支中独立出来。 开发完成后会合并到开发分支。")])])}),[],!1,null,null,null);a.default=v.exports}}]);